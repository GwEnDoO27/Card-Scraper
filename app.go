package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/chromedp/chromedp"
	_ "github.com/mattn/go-sqlite3"
)

type App struct {
	ctx context.Context
	db  *sql.DB
}

type Card struct {
	ID          int     `json:"id"`
	Name        string  `json:"name"`
	Set         string  `json:"set_name"`
	Rarity      string  `json:"rarity"`
	Price       string  `json:"price"`
	PriceNum    float64 `json:"price_num"`
	ImageURL    string  `json:"image_url"`
	CardURL     string  `json:"card_url"`
	Type        string  `json:"type"` // "collection" ou "wishlist"
	AddedAt     string  `json:"added_at"`
	LastUpdated string  `json:"last_updated"`
	// Nouvelles propri√©t√©s d√©taill√©es
	Quality     string `json:"quality"`      // Qualit√© s√©lectionn√©e (NM, LP, etc.)
	Language    string `json:"language"`     // Langue s√©lectionn√©e
	Edition     bool   `json:"edition"`      // Premi√®re √©dition ou non
	TotalOffers int    `json:"total_offers"` // Nombre total d'offres trouv√©es
}

type AddCardRequest struct {
	URL      string `json:"url"`
	Type     string `json:"type"`     // "collection" ou "wishlist"
	Quality  string `json:"quality"`  // "NM", "LP", "MP", "HP", "PO"
	Language string `json:"language"` // "Fran√ßais", "English", etc.
	Edition  bool   `json:"edition"`  // true pour premi√®re √©dition
}

func NewApp() *App {
	db, err := sql.Open("sqlite3", "./cardmarket_app.db")
	if err != nil {
		log.Fatal(err)
	}

	// Cr√©er les tables
	createTables := `
	CREATE TABLE IF NOT EXISTS cards (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		name TEXT NOT NULL,
		set_name TEXT,
		rarity TEXT,
		price TEXT,
		price_num REAL,
		image_url TEXT,
		card_url TEXT UNIQUE,
		type TEXT NOT NULL, -- 'collection' ou 'wishlist'
		added_at DATETIME DEFAULT CURRENT_TIMESTAMP,
		last_updated DATETIME DEFAULT CURRENT_TIMESTAMP
	);
	
	CREATE INDEX IF NOT EXISTS idx_cards_type ON cards(type);
	CREATE INDEX IF NOT EXISTS idx_cards_url ON cards(card_url);
	`

	_, err = db.Exec(createTables)
	if err != nil {
		log.Fatal(err)
	}

	// Ajouter les nouvelles colonnes une par une, en g√©rant les erreurs
	newColumns := []string{
		"ALTER TABLE cards ADD COLUMN quality TEXT DEFAULT ''",
		"ALTER TABLE cards ADD COLUMN language TEXT DEFAULT ''",
		"ALTER TABLE cards ADD COLUMN edition BOOLEAN DEFAULT FALSE",
		"ALTER TABLE cards ADD COLUMN total_offers INTEGER DEFAULT 0",
	}

	for _, query := range newColumns {
		_, err = db.Exec(query)
		if err != nil && !strings.Contains(err.Error(), "duplicate column name") {
			log.Printf("Erreur lors de l'ajout de colonne: %v", err)
		}
	}

	return &App{db: db}
}

func (a *App) OnStartup(ctx context.Context) {
	a.ctx = ctx
}

// Ajouter une nouvelle carte
func (a *App) AddCard(req AddCardRequest) (*Card, error) {
	log.Printf("Ajout d'une carte: URL=%s, Type=%s", req.URL, req.Type)

	// V√©rifier si la carte existe d√©j√†
	existingCard, err := a.getCardByURL(req.URL)
	if err == nil {
		// La carte existe d√©j√†
		if existingCard.Type == req.Type {
			return nil, fmt.Errorf("cette carte est d√©j√† dans votre %s", req.Type)
		} else {
			// D√©placer la carte d'un type √† l'autre
			err = a.moveCard(existingCard.ID, req.Type)
			if err != nil {
				return nil, err
			}
			existingCard.Type = req.Type
			return existingCard, nil
		}
	}

	// Scraper les informations de la carte
	cardInfo, err := a.scrapeCardInfo(req.URL, req)
	if err != nil {
		log.Printf("‚ùå Erreur scraping: %v", err)

		// Messages d'erreur sp√©cifiques selon le contexte
		if strings.Contains(err.Error(), "impossible de se connecter au navigateur") {
			if runtime.GOOS == "windows" {
				return nil, fmt.Errorf("impossible d'acc√©der au navigateur. Sur Windows: 1) V√©rifiez que Chrome/Edge est install√©, 2) Ajoutez l'application aux exclusions antivirus, 3) D√©sactivez temporairement Windows Defender si n√©cessaire")
			}
			return nil, fmt.Errorf("impossible d'acc√©der au navigateur: %v", err)
		}

		if strings.Contains(err.Error(), "aucune carte correspondant aux crit√®res") ||
			strings.Contains(err.Error(), "impossible d'extraire les offres") {
			return nil, fmt.Errorf("carte non trouv√©e avec les crit√®res sp√©cifi√©s (qualit√©: %s, langue: %s, √©dition: %t). Aucune carte similaire disponible",
				req.Quality, req.Language, req.Edition)
		}

		if strings.Contains(err.Error(), "context deadline exceeded") {
			return nil, fmt.Errorf("timeout lors de l'acc√®s √† CardMarket. V√©rifiez votre connexion internet et r√©essayez")
		}

		return nil, fmt.Errorf("erreur lors du scraping: %v", err)
	}

	// Sauvegarder en base
	card := &Card{
		Name:        cardInfo.Name,
		Set:         cardInfo.Set,
		Rarity:      cardInfo.Rarity,
		Price:       cardInfo.Price,
		PriceNum:    cardInfo.PriceNum,
		ImageURL:    cardInfo.ImageURL,
		CardURL:     req.URL,
		Type:        req.Type,
		AddedAt:     time.Now().Format("2006-01-02 15:04:05"),
		LastUpdated: time.Now().Format("2006-01-02 15:04:05"),
		Quality:     req.Quality,
		Language:    req.Language,
		Edition:     req.Edition,
		TotalOffers: len(cardInfo.Offers),
	}

	result, err := a.db.Exec(`
		INSERT INTO cards (name, set_name, rarity, price, price_num, image_url, card_url, type, added_at, last_updated, quality, language, edition, total_offers)
		VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
	`, card.Name, card.Set, card.Rarity, card.Price, card.PriceNum, card.ImageURL, card.CardURL, card.Type, card.AddedAt, card.LastUpdated, card.Quality, card.Language, card.Edition, card.TotalOffers)

	if err != nil {
		return nil, fmt.Errorf("erreur sauvegarde: %v", err)
	}

	id, _ := result.LastInsertId()
	card.ID = int(id)

	return card, nil
}

func (a *App) Sumprice() (float64, error) {
	var totalPrice float64
	err := a.db.QueryRow(`
		SELECT COALESCE(SUM(price_num), 0)
		FROM cards
	`).Scan(&totalPrice)
	if err != nil {
		return 0.0, err
	}

	return totalPrice, nil
}

// Rescraper toutes les cartes pour mettre √† jour les prix
func (a *App) RescrapAllCards() (map[string]any, error) {
	log.Println("üîÑ D√©but du rescrap de toutes les cartes...")

	// R√©cup√©rer toutes les cartes
	rows, err := a.db.Query(`
		SELECT id, card_url, type, quality, language, edition
		FROM cards
		ORDER BY id
	`)
	if err != nil {
		return nil, fmt.Errorf("erreur lors de la r√©cup√©ration des cartes: %v", err)
	}
	defer rows.Close()

	stats := map[string]any{
		"total_cards":   0,
		"updated":       0,
		"errors":        0,
		"error_details": []string{},
	}

	var cards []struct {
		ID       int
		URL      string
		Type     string
		Quality  string
		Language string
		Edition  bool
	}

	// Collecter toutes les cartes
	for rows.Next() {
		var card struct {
			ID       int
			URL      string
			Type     string
			Quality  string
			Language string
			Edition  bool
		}
		err := rows.Scan(&card.ID, &card.URL, &card.Type, &card.Quality, &card.Language, &card.Edition)
		if err != nil {
			log.Printf("Erreur lors de la lecture de la carte: %v", err)
			continue
		}
		cards = append(cards, card)
	}

	stats["total_cards"] = len(cards)
	log.Printf("üìä %d cartes √† rescraper", len(cards))

	// Rescraper chaque carte
	for i, card := range cards {
		log.Printf("üîÑ Rescrap carte %d/%d: ID=%d", i+1, len(cards), card.ID)

		// Cr√©er la requ√™te pour rescraper
		req := AddCardRequest{
			URL:      card.URL,
			Type:     card.Type,
			Quality:  card.Quality,
			Language: card.Language,
			Edition:  card.Edition,
		}

		// Scraper les nouvelles informations
		cardInfo, err := a.scrapeCardInfo(card.URL, req)
		if err != nil {
			errorMsg := fmt.Sprintf("Carte ID %d: %v", card.ID, err)
			log.Printf("‚ùå %s", errorMsg)
			stats["errors"] = stats["errors"].(int) + 1
			if errorDetails, ok := stats["error_details"].([]string); ok {
				stats["error_details"] = append(errorDetails, errorMsg)
			}
			continue
		}

		// Mettre √† jour la carte en base
		_, err = a.db.Exec(`
			UPDATE cards 
			SET name = ?, set_name = ?, rarity = ?, price = ?, price_num = ?, 
			    image_url = ?, last_updated = CURRENT_TIMESTAMP
			WHERE id = ?
		`, cardInfo.Name, cardInfo.Set, cardInfo.Rarity, cardInfo.Price,
			cardInfo.PriceNum, cardInfo.ImageURL, card.ID)

		if err != nil {
			errorMsg := fmt.Sprintf("Carte ID %d: erreur sauvegarde %v", card.ID, err)
			log.Printf("‚ùå %s", errorMsg)
			stats["errors"] = stats["errors"].(int) + 1
			if errorDetails, ok := stats["error_details"].([]string); ok {
				stats["error_details"] = append(errorDetails, errorMsg)
			}
			continue
		}

		stats["updated"] = stats["updated"].(int) + 1
		log.Printf("‚úÖ Carte ID %d mise √† jour: %s - %s", card.ID, cardInfo.Price, cardInfo.Name)
	}

	log.Printf("üéâ Rescrap termin√©: %d/%d cartes mises √† jour, %d erreurs",
		stats["updated"], stats["total_cards"], stats["errors"])

	return stats, nil
}

// R√©cup√©rer toutes les cartes d'un type
func (a *App) GetCards(cardType string) ([]Card, error) {
	rows, err := a.db.Query(`
		SELECT id, name, set_name, rarity, price, price_num, image_url, card_url, type, added_at, last_updated,
		       COALESCE(quality, '') as quality, COALESCE(language, '') as language, 
		       COALESCE(edition, FALSE) as edition, COALESCE(total_offers, 0) as total_offers
		FROM cards
		WHERE type = ?
		ORDER BY added_at DESC
	`, cardType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var cards []Card
	for rows.Next() {
		var card Card
		err := rows.Scan(&card.ID, &card.Name, &card.Set, &card.Rarity, &card.Price, &card.PriceNum,
			&card.ImageURL, &card.CardURL, &card.Type, &card.AddedAt, &card.LastUpdated,
			&card.Quality, &card.Language, &card.Edition, &card.TotalOffers)
		if err != nil {
			return nil, err
		}
		cards = append(cards, card)
	}

	return cards, nil
}

// Supprimer une carte
func (a *App) DeleteCard(cardID int) error {
	_, err := a.db.Exec("DELETE FROM cards WHERE id = ?", cardID)
	return err
}

// D√©placer une carte d'une liste √† l'autre
func (a *App) MoveCard(cardID int, newType string) error {
	return a.moveCard(cardID, newType)
}

func (a *App) moveCard(cardID int, newType string) error {
	_, err := a.db.Exec(`
		UPDATE cards 
		SET type = ?, last_updated = CURRENT_TIMESTAMP 
		WHERE id = ?
	`, newType, cardID)
	return err
}

// R√©cup√©rer les statistiques
func (a *App) GetStats() (map[string]any, error) {
	stats := make(map[string]any)

	// Compter les cartes par type
	var collectionCount, wishlistCount int
	var collectionValue, wishlistValue float64

	err := a.db.QueryRow("SELECT COUNT(*), COALESCE(SUM(price_num), 0) FROM cards WHERE type = 'collection'").Scan(&collectionCount, &collectionValue)
	if err != nil {
		return nil, err
	}

	err = a.db.QueryRow("SELECT COUNT(*), COALESCE(SUM(price_num), 0) FROM cards WHERE type = 'wishlist'").Scan(&wishlistCount, &wishlistValue)
	if err != nil {
		return nil, err
	}

	stats["collection_count"] = collectionCount
	stats["wishlist_count"] = wishlistCount
	stats["collection_value"] = collectionValue
	stats["wishlist_value"] = wishlistValue
	stats["total_cards"] = collectionCount + wishlistCount
	stats["total_value"] = collectionValue + wishlistValue

	return stats, nil
}

// GetSystemInfo retourne des informations syst√®me pour debug
func (a *App) GetSystemInfo() map[string]any {
	info := map[string]any{
		"os":           runtime.GOOS,
		"architecture": runtime.GOARCH,
		"go_version":   runtime.Version(),
	}

	if runtime.GOOS == "windows" {
		// Informations sp√©cifiques Windows
		browserPath := (&App{}).findWindowsBrowser()
		info["browser_found"] = browserPath != ""
		info["browser_path"] = browserPath

		// Variables d'environnement Windows importantes
		info["program_files"] = os.Getenv("ProgramFiles")
		info["program_files_x86"] = os.Getenv("ProgramFiles(x86)")
		info["local_appdata"] = os.Getenv("LOCALAPPDATA")
		info["user_profile"] = os.Getenv("USERPROFILE")
	}

	return info
}

// Fonctions utilitaires internes
func (a *App) getCardByURL(url string) (*Card, error) {
	var card Card
	err := a.db.QueryRow(`
		SELECT id, name, set_name, rarity, price, price_num, image_url, card_url, type, added_at, last_updated,
		       COALESCE(quality, '') as quality, COALESCE(language, '') as language, 
		       COALESCE(edition, FALSE) as edition, COALESCE(total_offers, 0) as total_offers
		FROM cards WHERE card_url = ?
	`, url).Scan(&card.ID, &card.Name, &card.Set, &card.Rarity, &card.Price, &card.PriceNum,
		&card.ImageURL, &card.CardURL, &card.Type, &card.AddedAt, &card.LastUpdated,
		&card.Quality, &card.Language, &card.Edition, &card.TotalOffers)
	return &card, err
}

func (a *App) getCardByID(id int) (*Card, error) {
	var card Card
	err := a.db.QueryRow(`
		SELECT id, name, set_name, rarity, price, price_num, image_url, card_url, type, added_at, last_updated,
		       COALESCE(quality, '') as quality, COALESCE(language, '') as language, 
		       COALESCE(edition, FALSE) as edition, COALESCE(total_offers, 0) as total_offers
		FROM cards WHERE id = ?
	`, id).Scan(&card.ID, &card.Name, &card.Set, &card.Rarity, &card.Price, &card.PriceNum,
		&card.ImageURL, &card.CardURL, &card.Type, &card.AddedAt, &card.LastUpdated,
		&card.Quality, &card.Language, &card.Edition, &card.TotalOffers)
	return &card, err
}

type ScrapedCardInfo struct {
	Name     string
	Set      string
	Rarity   string
	Price    string
	PriceNum float64
	ImageURL string
	Offers   []CardOffer
}

type CardOffer struct {
	Mint     string  `json:"mint"`
	Language string  `json:"language"`
	Edition  bool    `json:"edition"`
	Price    string  `json:"price"`
	PriceNum float64 `json:"price_num"`
	Rarity   string  `json:"rarity"`
	SetName  string  `json:"set_name"`
}

// getChromeOptions retourne les options Chrome optimis√©es selon l'OS
func (a *App) getChromeOptions() []chromedp.ExecAllocatorOption {
	// Mode compatibilit√© antivirus : options moins agressives
	opts := []chromedp.ExecAllocatorOption{
		chromedp.Flag("headless", true),
		chromedp.Flag("disable-blink-features", "AutomationControlled"),
		chromedp.Flag("disable-features", "VizDisplayCompositor"),
		chromedp.Flag("disable-extensions", true),
		chromedp.Flag("disable-default-apps", true),
		chromedp.Flag("disable-sync", true),
		chromedp.Flag("disable-translate", true),
		chromedp.Flag("disable-background-networking", true),
		chromedp.Flag("disable-background-timer-throttling", false), // Important: laisser false
		chromedp.Flag("disable-client-side-phishing-detection", true),
		chromedp.Flag("disable-component-update", true),
		chromedp.Flag("disable-hang-monitor", true),
		chromedp.Flag("disable-popup-blocking", true),
		chromedp.Flag("disable-prompt-on-repost", true),
		chromedp.Flag("disable-web-security", false), // Important: s√©curit√© activ√©e
		chromedp.Flag("no-first-run", true),
		chromedp.Flag("no-default-browser-check", true),
	}

	// Configuration sp√©cifique √† Windows - Mode compatibilit√© antivirus
	if runtime.GOOS == "windows" {
		log.Println("ü™ü Mode Windows - Configuration s√©curis√©e antivirus")

		// User-Agent Windows standard
		opts = append(opts, chromedp.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"))

		// Options Windows avec compatibilit√© antivirus
		opts = append(opts,
			chromedp.Flag("disable-gpu", true),
			chromedp.Flag("disable-gpu-sandbox", true),
			chromedp.Flag("disable-software-rasterizer", true),
			chromedp.Flag("disable-dev-shm-usage", true), // √âvite les probl√®mes de m√©moire partag√©e
			chromedp.Flag("remote-debugging-port", "0"),  // D√©sactive le debugging distant
			chromedp.Flag("disable-logging", true),
			chromedp.Flag("log-level", "3"), // Erreurs seulement
			chromedp.Flag("silent", true),
		)

		// Mode s√©curis√© : ne pas utiliser --no-sandbox sur Windows par d√©faut
		// L'antivirus pr√©f√®re que le sandbox soit activ√©

		// Chercher Chrome ou Edge - pr√©f√©rer Edge sur Windows
		chromePath := a.findWindowsBrowserSecure()
		if chromePath != "" {
			log.Printf("üåê Navigateur s√©curis√© trouv√©: %s", filepath.Base(chromePath))
			opts = append([]chromedp.ExecAllocatorOption{chromedp.ExecPath(chromePath)}, opts...)
		} else {
			log.Println("‚ö†Ô∏è  Aucun navigateur trouv√© - mode de compatibilit√©")
			// En dernier recours, ajouter no-sandbox mais avec avertissement
			opts = append(opts, chromedp.Flag("no-sandbox", true))
		}
	} else {
		// Configuration macOS/Linux
		opts = append(opts, chromedp.UserAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"))
		opts = append(opts, chromedp.Flag("no-sandbox", true))
	}

	return opts
}

// getChromeOptionsSecure retourne les options Chrome s√©curis√©es pour Windows
func (a *App) getChromeOptionsSecure() []chromedp.ExecAllocatorOption {
	opts := []chromedp.ExecAllocatorOption{
		chromedp.Flag("headless", true),
		chromedp.Flag("disable-blink-features", "AutomationControlled"),
		chromedp.Flag("disable-features", "VizDisplayCompositor"),
		chromedp.Flag("disable-extensions", true),
		chromedp.Flag("disable-default-apps", true),
		chromedp.Flag("disable-sync", true),
		chromedp.Flag("disable-translate", true),
		chromedp.Flag("disable-background-networking", true),
		chromedp.Flag("disable-client-side-phishing-detection", true),
		chromedp.Flag("disable-component-update", true),
		chromedp.Flag("disable-hang-monitor", true),
		chromedp.Flag("disable-popup-blocking", true),
		chromedp.Flag("disable-prompt-on-repost", true),
		chromedp.Flag("disable-web-security", false), // S√©curit√© activ√©e
		chromedp.Flag("no-first-run", true),
		chromedp.Flag("no-default-browser-check", true),
		chromedp.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"),
		chromedp.Flag("disable-gpu", true),
		chromedp.Flag("disable-gpu-sandbox", true),
		chromedp.Flag("disable-software-rasterizer", true),
		chromedp.Flag("disable-dev-shm-usage", true),
		chromedp.Flag("remote-debugging-port", "0"),
		chromedp.Flag("disable-logging", true),
		chromedp.Flag("log-level", "3"),
		chromedp.Flag("silent", true),
	}

	// Chercher Edge ou Chrome
	chromePath := a.findWindowsBrowserSecure()
	if chromePath != "" {
		log.Printf("üåê Navigateur trouv√©: %s", filepath.Base(chromePath))
		opts = append([]chromedp.ExecAllocatorOption{chromedp.ExecPath(chromePath)}, opts...)
	}

	return opts
}

// getChromeOptionsPermissive retourne les options Chrome permissives pour Windows
func (a *App) getChromeOptionsPermissive() []chromedp.ExecAllocatorOption {
	opts := a.getChromeOptionsSecure()
	
	// Ajouter des options plus permissives
	opts = append(opts,
		chromedp.Flag("no-sandbox", true),
		chromedp.Flag("disable-setuid-sandbox", true),
		chromedp.Flag("disable-dev-shm-usage", true),
		chromedp.Flag("disable-accelerated-2d-canvas", true),
		chromedp.Flag("disable-accelerated-jpeg-decoding", true),
		chromedp.Flag("disable-accelerated-mjpeg-decode", true),
		chromedp.Flag("disable-accelerated-video-decode", true),
	)

	return opts
}

// getChromeOptionsMinimal retourne les options Chrome minimales pour Windows
func (a *App) getChromeOptionsMinimal() []chromedp.ExecAllocatorOption {
	opts := []chromedp.ExecAllocatorOption{
		chromedp.Flag("headless", true),
		chromedp.Flag("no-sandbox", true),
		chromedp.Flag("disable-setuid-sandbox", true),
		chromedp.Flag("disable-dev-shm-usage", true),
		chromedp.Flag("disable-gpu", true),
		chromedp.Flag("disable-web-security", true),
		chromedp.Flag("disable-extensions", true),
		chromedp.Flag("disable-plugins", true),
		chromedp.Flag("disable-images", true),
		chromedp.Flag("disable-javascript", false), // JavaScript n√©cessaire
		chromedp.Flag("disable-blink-features", "AutomationControlled"),
		chromedp.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"),
	}

	// Chercher navigateur
	chromePath := a.findWindowsBrowserSecure()
	if chromePath != "" {
		opts = append([]chromedp.ExecAllocatorOption{chromedp.ExecPath(chromePath)}, opts...)
	}

	return opts
}


// findWindowsBrowserSecure cherche un navigateur en privil√©giant Chrome pour la compatibilit√©
func (a *App) findWindowsBrowserSecure() string {
	if runtime.GOOS != "windows" {
		return ""
	}

	// Ordre de pr√©f√©rence : Chrome puis Edge (Chrome est plus compatible avec chromedp)
	browsers := []string{
		// Google Chrome (priorit√© 1 - meilleure compatibilit√© chromedp)
		filepath.Join(os.Getenv("ProgramFiles"), "Google", "Chrome", "Application", "chrome.exe"),
		filepath.Join(os.Getenv("ProgramFiles(x86)"), "Google", "Chrome", "Application", "chrome.exe"),
		filepath.Join(os.Getenv("LOCALAPPDATA"), "Google", "Chrome", "Application", "chrome.exe"),
		
		// Chrome Canary (version d√©veloppeur)
		filepath.Join(os.Getenv("LOCALAPPDATA"), "Google", "Chrome SxS", "Application", "chrome.exe"),
		
		// Chromium (open source)
		filepath.Join(os.Getenv("ProgramFiles"), "Chromium", "Application", "chrome.exe"),
		filepath.Join(os.Getenv("ProgramFiles(x86)"), "Chromium", "Application", "chrome.exe"),
		filepath.Join(os.Getenv("LOCALAPPDATA"), "Chromium", "Application", "chrome.exe"),

		// Microsoft Edge (priorit√© 2 - peut causer des probl√®mes avec chromedp)
		filepath.Join(os.Getenv("ProgramFiles"), "Microsoft", "Edge", "Application", "msedge.exe"),
		filepath.Join(os.Getenv("ProgramFiles(x86)"), "Microsoft", "Edge", "Application", "msedge.exe"),
		filepath.Join(os.Getenv("LOCALAPPDATA"), "Microsoft", "Edge", "Application", "msedge.exe"),
	}

	for _, path := range browsers {
		if _, err := os.Stat(path); err == nil {
			// V√©rifier que le fichier est accessible en lecture
			if file, err := os.Open(path); err == nil {
				file.Close()
				browserName := filepath.Base(path)
				log.Printf("‚úÖ Navigateur accessible: %s", browserName)
				
				// Avertissement sp√©cial pour Edge
				if browserName == "msedge.exe" {
					log.Println("‚ö†Ô∏è  Edge d√©tect√© - peut causer des probl√®mes 'invalid context'")
					log.Println("üí° Pour de meilleurs r√©sultats, installez Google Chrome")
				} else if browserName == "chrome.exe" {
					log.Println("‚úÖ Chrome d√©tect√© - excellente compatibilit√© chromedp")
				}
				
				return path
			} else {
				log.Printf("‚ö†Ô∏è  Navigateur trouv√© mais non accessible: %s (%v)", filepath.Base(path), err)
			}
		}
	}

	return ""
}

// findWindowsBrowser cherche Chrome ou Edge sur Windows (m√©thode legacy)
func (a *App) findWindowsBrowser() string {
	return a.findWindowsBrowserSecure()
}


// testBrowserConnection teste si le navigateur r√©pond correctement
func (a *App) testBrowserConnection(ctx context.Context) error {
	log.Println("üîç Test de connexion au navigateur...")

	// Cr√©er un contexte avec timeout court pour le test
	testCtx, testCancel := context.WithTimeout(ctx, 10*time.Second)
	defer testCancel()

	// Test simple: naviguer vers about:blank
	err := chromedp.Run(testCtx,
		chromedp.Navigate("about:blank"),
		chromedp.WaitVisible("body", chromedp.ByQuery),
	)

	if err != nil {
		return fmt.Errorf("√©chec connexion navigateur: %v", err)
	}

	log.Println("‚úÖ Navigateur connect√© avec succ√®s")
	return nil
}

// scrapeWithRetries effectue le scraping avec plusieurs tentatives pour Windows
func (a *App) scrapeWithRetries(req AddCardRequest, ctx context.Context, url string) *CardOffer {
	log.Println("üîÑ Mode Windows : scraping avec tentatives multiples...")

	attempts := []struct {
		delay    time.Duration
		loadMore bool
		name     string
	}{
		{2 * time.Second, false, "Tentative rapide"},
		{5 * time.Second, false, "Tentative standard"},
		{8 * time.Second, true, "Tentative avec chargement suppl√©mentaire"},
		{12 * time.Second, true, "Tentative finale (mode patient)"},
	}

	for i, attempt := range attempts {
		log.Printf("üéØ %s (%d/%d)...", attempt.name, i+1, len(attempts))

		// D√©lai avant chaque tentative pour √©viter la d√©tection
		if i > 0 {
			log.Printf("‚è≥ Attente de %v avant la tentative...", attempt.delay)
			time.Sleep(attempt.delay)
		}

		result := a.launchLoopPatient(req.Quality, req.Language, req.Edition, attempt.loadMore, ctx, url)
		if result != nil {
			log.Printf("‚úÖ Succ√®s avec %s !", attempt.name)
			return result
		}

		log.Printf("‚ùå %s √©chou√©e, passage √† la suivante...", attempt.name)
	}

	log.Println("‚ùå Toutes les tentatives ont √©chou√©")
	return nil
}

func (a *App) scrapeCardInfo(url string, req AddCardRequest) (*ScrapedCardInfo, error) {
	log.Printf("üöÄ D√©marrage scraping pour: %s", url)

	// Configuration Chrome optimis√©e
	opts := append(chromedp.DefaultExecAllocatorOptions[:],
		chromedp.Flag("headless", true),
		chromedp.Flag("no-sandbox", true),
		chromedp.Flag("disable-dev-shm-usage", true),
		chromedp.Flag("disable-blink-features", "AutomationControlled"),
		chromedp.UserAgent("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36"),
	)

	allocCtx, allocCancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer allocCancel()

	ctx, ctxCancel := chromedp.NewContext(allocCtx)
	defer ctxCancel()

	info := &ScrapedCardInfo{}

	// Premi√®re tentative sans charger plus de contenu
	result := a.launchLoop(req.Quality, req.Language, req.Edition, false, ctx, url)

	// Si pas trouv√©, essayer avec le chargement de plus de contenu
	if result == nil {
		log.Println("üîÑ Premi√®re tentative √©chou√©e, essai avec chargement suppl√©mentaire...")
		result = a.launchLoop(req.Quality, req.Language, req.Edition, true, ctx, url)
	}

	if result == nil {
		return nil, fmt.Errorf("aucune carte correspondant aux crit√®res qualit√©=%s, langue=%s, √©dition=%t", req.Quality, req.Language, req.Edition)
	}

	// Extraire les informations de base (nom, set, raret√©)
	err := chromedp.Run(ctx,
		chromedp.Navigate(url),
		chromedp.WaitVisible("body", chromedp.ByQuery),
		chromedp.Sleep(2*time.Second),
	)
	if err != nil {
		log.Printf("Erreur navigation: %v", err)
	}

	// Extraire le nom
	var name string
	err = chromedp.Run(ctx, chromedp.Text("h1", &name, chromedp.ByQuery))
	if err != nil || name == "" {
		name = "Carte inconnue"
	}
	info.Name = strings.TrimSpace(name)

	// Extraire la raret√© et le set depuis l'info-list-container
	var rarityFromPage, setFromPage string
	err = chromedp.Run(ctx,
		chromedp.Evaluate(`
			(function() {
				var result = {rarity: '', set_name: ''};
				try {
					var infoContainer = document.querySelector('.info-list-container');
					if (infoContainer) {
						// Extraire la raret√© - chercher le SVG avec data-bs-original-title
						var rarityElement = infoContainer.querySelector('svg[data-bs-original-title]');
						result.rarity = rarityElement ? rarityElement.getAttribute('data-bs-original-title') : '';
						
						// Extraire le nom du set - chercher le lien vers l'expansion
						var setElement = infoContainer.querySelector('a[href*="/Expansions/"]');
						result.set_name = setElement ? setElement.textContent.trim() : '';
					}
				} catch(e) {
					console.log('Erreur extraction:', e);
				}
				return result;
			})()
		`, &map[string]interface{}{}),
	)
	
	// Extraire les valeurs depuis le r√©sultat JavaScript
	if err == nil {
		var pageInfo map[string]interface{}
		err = chromedp.Run(ctx,
			chromedp.Evaluate(`
				(function() {
					var result = {rarity: '', set_name: ''};
					try {
						var infoContainer = document.querySelector('.info-list-container');
						if (infoContainer) {
							var rarityElement = infoContainer.querySelector('svg[data-bs-original-title]');
							result.rarity = rarityElement ? rarityElement.getAttribute('data-bs-original-title') : '';
							
							var setElement = infoContainer.querySelector('a[href*="/Expansions/"]');
							result.set_name = setElement ? setElement.textContent.trim() : '';
						}
					} catch(e) {
						console.log('Erreur extraction:', e);
					}
					return result;
				})()
			`, &pageInfo),
		)
		
		if err == nil && pageInfo != nil {
			if rarity, ok := pageInfo["rarity"].(string); ok {
				rarityFromPage = strings.TrimSpace(rarity)
			}
			if setName, ok := pageInfo["set_name"].(string); ok {
				setFromPage = strings.TrimSpace(setName)
			}
		}
	}
	
	log.Printf("Informations extraites de la page: raret√©='%s', set='%s'", rarityFromPage, setFromPage)

	// Utiliser les informations extraites, en priorit√© depuis la page principale
	if setFromPage != "" {
		info.Set = setFromPage
		result.SetName = setFromPage // Mettre √† jour aussi dans result pour les logs
	} else if result.SetName != "" {
		info.Set = result.SetName
	} else {
		info.Set = "Set inconnu"
	}
	
	if rarityFromPage != "" {
		info.Rarity = rarityFromPage
		result.Rarity = rarityFromPage // Mettre √† jour aussi dans result pour les logs
	} else if result.Rarity != "" {
		info.Rarity = result.Rarity
	} else {
		info.Rarity = "Raret√© inconnue"
	}
	
	info.Offers = []CardOffer{*result}

	// Utiliser la carte trouv√©e
	info.Price = result.Price
	info.PriceNum = result.PriceNum
	log.Printf("‚úÖ Offre s√©lectionn√©e: %s (mint: %s, langue: %s, edition: %t, rarity: %s, set: %s)",
		result.Price, result.Mint, result.Language, result.Edition, result.Rarity, result.SetName)

	return info, nil
}

// scrapeCardInfoWindows g√®re le scraping sp√©cifique Windows avec modes multiples
func (a *App) scrapeCardInfoWindows(url string, req AddCardRequest) (*ScrapedCardInfo, error) {
	modes := []struct {
		name    string
		timeout time.Duration
		options []chromedp.ExecAllocatorOption
	}{
		{
			name:    "secure",
			timeout: 90 * time.Second,
			options: a.getChromeOptionsSecure(),
		},
		{
			name:    "permissive", 
			timeout: 120 * time.Second,
			options: a.getChromeOptionsPermissive(),
		},
		{
			name:    "minimal",
			timeout: 60 * time.Second,
			options: a.getChromeOptionsMinimal(),
		},
	}

	for attempt, mode := range modes {
		log.Printf("üéØ Tentative %d/3 avec mode %s", attempt+1, mode.name)
		log.Printf("ü™ü Mode Windows - Configuration %s", mode.name)
		
		result, err := a.tryScrapingMode(url, req, mode.options, mode.timeout)
		if result != nil {
			log.Printf("‚úÖ Succ√®s avec mode %s", mode.name)
			return result, nil
		}
		
		log.Printf("‚ùå Mode %s √©chou√©: %v", mode.name, err)
		if attempt < len(modes)-1 {
			log.Println("‚è≥ Attente avant tentative suivante...")
			time.Sleep(3 * time.Second)
		}
	}

	// Tous les modes chromedp ont √©chou√©, essayer le moteur web int√©gr√© de Wails
	log.Println("üîÑ Tous les modes navigateur ont √©chou√©, tentative avec moteur web Wails...")
	return a.scrapeCardInfoWithWails(url, req)
}

// scrapeCardInfoStandard g√®re le scraping standard pour macOS/Linux
func (a *App) scrapeCardInfoStandard(url string, req AddCardRequest) (*ScrapedCardInfo, error) {
	opts := a.getChromeOptions()
	return a.tryScrapingMode(url, req, opts, 60*time.Second)
}


// scrapeCardInfoWithWails utilise le moteur web int√©gr√© de Wails
func (a *App) scrapeCardInfoWithWails(url string, req AddCardRequest) (*ScrapedCardInfo, error) {
	log.Println("üåê Mode Wails WebView - Utilisation du moteur web int√©gr√©")
	
	// Le moteur web Wails utilise le WebView syst√®me (Edge WebView2 sur Windows)
	// qui est plus fiable que chromedp car il utilise le navigateur syst√®me
	
	// Cr√©er un contexte chromedp mais avec les options syst√®me
	opts := []chromedp.ExecAllocatorOption{
		// Utiliser le navigateur syst√®me par d√©faut
		chromedp.Flag("headless", false),  // Mode visible pour debug si n√©cessaire
		chromedp.Flag("disable-web-security", false),  // Garder la s√©curit√©
		chromedp.Flag("disable-features", "VizDisplayCompositor"),
		chromedp.WindowSize(1920, 1080),
		chromedp.UserAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36 Edg/120.0.0.0"),
	}
	
	// Ne pas forcer un chemin navigateur sp√©cifique - laisser le syst√®me choisir
	log.Println("üîß Utilisation du WebView syst√®me (Edge WebView2/Safari WebKit)")
	
	allocCtx, allocCancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer allocCancel()
	
	ctx, ctxCancel := chromedp.NewContext(allocCtx)
	defer ctxCancel()
	
	// Test simple pour v√©rifier que le moteur web fonctionne
	log.Println("üîç Test du moteur web int√©gr√©...")
	testCtx, testCancel := context.WithTimeout(ctx, 15*time.Second)
	defer testCancel()
	
	err := chromedp.Run(testCtx,
		chromedp.Navigate("about:blank"),
		chromedp.Sleep(2*time.Second),
	)
	
	if err != nil {
		return nil, fmt.Errorf("moteur web int√©gr√© inaccessible: %v", err)
	}
	
	log.Println("‚úÖ Moteur web int√©gr√© fonctionnel")
	
	// Maintenant utiliser ce contexte pour le scraping
	return a.scrapeWithWailsWebView(ctx, url, req)
}

// scrapeWithWailsWebView effectue le scraping avec le WebView et recherche par crit√®res
func (a *App) scrapeWithWailsWebView(ctx context.Context, url string, req AddCardRequest) (*ScrapedCardInfo, error) {
	log.Printf("üîç Navigation vers: %s", url)
	log.Printf("üìã Crit√®res de recherche: Qualit√©=%s, Langue=%s, √âdition=%t", req.Quality, req.Language, req.Edition)
	
	// Cr√©er un timeout pour toute l'op√©ration
	scrapeCtx, scrapeCancel := context.WithTimeout(ctx, 60*time.Second)
	defer scrapeCancel()
	
	// Naviguer vers la page et attendre le chargement
	err := chromedp.Run(scrapeCtx,
		chromedp.Navigate(url),
		chromedp.WaitVisible("body", chromedp.ByQuery),
		chromedp.Sleep(5*time.Second), // Attendre le chargement complet des offres
	)
	
	if err != nil {
		return nil, fmt.Errorf("erreur navigation WebView: %v", err)
	}
	
	log.Println("‚úÖ Page charg√©e dans le WebView")
	
	// Rechercher la meilleure offre selon les crit√®res
	result := a.findBestOfferWebView(scrapeCtx, req.Quality, req.Language, req.Edition, url)
	if result != nil {
		log.Printf("‚úÖ Carte trouv√©e avec crit√®res: %s √† %s", result.Name, result.Price)
		return result, nil
	}
	
	log.Println("‚ùå Aucune carte trouv√©e correspondant aux crit√®res")
	return nil, fmt.Errorf("aucune carte correspondant aux crit√®res qualit√©=%s, langue=%s, √©dition=%t", req.Quality, req.Language, req.Edition)
}

// findBestOfferWebView recherche la meilleure offre selon les crit√®res dans le WebView
func (a *App) findBestOfferWebView(ctx context.Context, quality, language string, edition bool, url string) *ScrapedCardInfo {
	log.Printf("üîç Recherche d'offres avec crit√®res: qualit√©=%s, langue=%s, √©dition=%t", quality, language, edition)
	
	// D'abord extraire les informations de base de la carte
	info := &ScrapedCardInfo{}
	
	// Extraire le nom depuis le titre
	var pageTitle string
	err := chromedp.Run(ctx,
		chromedp.Title(&pageTitle),
	)
	
	if err == nil && pageTitle != "" {
		if idx := strings.Index(pageTitle, " - "); idx != -1 {
			info.Name = strings.TrimSpace(pageTitle[:idx])
		} else {
			info.Name = strings.TrimSpace(pageTitle)
		}
		log.Printf("‚úÖ Nom de la carte: %s", info.Name)
	}
	
	// Extraire l'image de la carte
	var cardImageURL string
	err = chromedp.Run(ctx,
		chromedp.AttributeValue(`img[src*="card"][src*=".jpg"], img[alt*="card"], img[class*="card"]`, "src", &cardImageURL, nil),
	)
	
	if err == nil && cardImageURL != "" {
		if !strings.HasPrefix(cardImageURL, "http") {
			cardImageURL = "https://www.cardmarket.com" + cardImageURL
		}
		info.ImageURL = cardImageURL
		log.Printf("‚úÖ Image de la carte: %s", info.ImageURL)
	}
	
	// Maintenant rechercher dans le tableau des offres
	offers := a.extractOffersFromWebView(ctx, quality, language, edition)
	
	if len(offers) == 0 {
		log.Println("‚ùå Aucune offre trouv√©e correspondant aux crit√®res")
		return nil
	}
	
	// Trouver la meilleure offre (prix le plus bas)
	var bestOffer *CardOffer
	for i, offer := range offers {
		if bestOffer == nil || offer.PriceNum < bestOffer.PriceNum {
			bestOffer = &offers[i]
		}
	}
	
	if bestOffer != nil {
		info.Price = bestOffer.Price
		info.PriceNum = bestOffer.PriceNum
		info.Set = "Extension CardMarket"
		info.Rarity = "Raret√© CardMarket"
		
		// Cr√©er la liste des offres
		info.Offers = offers
		
		log.Printf("‚úÖ Meilleure offre trouv√©e: %s (qualit√©: %s, langue: %s)", bestOffer.Price, bestOffer.Mint, bestOffer.Language)
		return info
	}
	
	return nil
}

// extractOffersFromWebView extrait toutes les offres du tableau CardMarket selon les crit√®res
func (a *App) extractOffersFromWebView(ctx context.Context, quality, language string, edition bool) []CardOffer {
	log.Println("üìã Extraction des offres du tableau...")
	
	// D'abord, debugger pour voir ce qu'il y a sur la page
	var pageHTML string
	err := chromedp.Run(ctx,
		chromedp.Evaluate(`document.body.innerHTML`, &pageHTML),
	)
	if err == nil && len(pageHTML) > 0 {
		log.Printf("üîç Page HTML size: %d bytes", len(pageHTML))
		
		// Rechercher des patterns de prix pour confirmer qu'il y a du contenu
		priceMatches := regexp.MustCompile(`\d+[,.]?\d*\s*‚Ç¨`).FindAllString(pageHTML, -1)
		maxShow := 5
		if len(priceMatches) < maxShow {
			maxShow = len(priceMatches)
		}
		log.Printf("üí∞ Patterns de prix trouv√©s: %d (%v)", len(priceMatches), priceMatches[:maxShow])
		
		// Rechercher des tableaux
		tableMatches := regexp.MustCompile(`<table[^>]*>`).FindAllString(pageHTML, -1)
		log.Printf("üìä Tableaux trouv√©s: %d", len(tableMatches))
		
		// Debugging: rechercher tous les √©l√©ments qui pourraient contenir des offres
		var debugInfo map[string]interface{}
		err := chromedp.Run(ctx,
			chromedp.Evaluate(`
				(function() {
					// Compter les √©l√©ments avec prix (contenant ‚Ç¨)
					var divsWithPrice = 0;
					var allDivs = document.querySelectorAll('div');
					for (var i = 0; i < allDivs.length; i++) {
						if (allDivs[i].textContent && allDivs[i].textContent.indexOf('‚Ç¨') !== -1) {
							divsWithPrice++;
						}
					}
					
					return {
						tables: document.querySelectorAll('table').length,
						article_rows: document.querySelectorAll('.article-row').length, 
						product_rows: document.querySelectorAll('.product-row').length,
						offer_rows: document.querySelectorAll('[class*="offer"]').length,
						sell_rows: document.querySelectorAll('[class*="sell"]').length,
						tr_elements: document.querySelectorAll('tr').length,
						tbody_elements: document.querySelectorAll('tbody').length,
						divs_with_price: divsWithPrice,
						all_divs: allDivs.length
					};
				})()
			`, &debugInfo),
		)
		
		if err == nil && debugInfo != nil {
			log.Printf("üîç Debug structure page:")
			for key, value := range debugInfo {
				log.Printf("   - %s: %v", key, value)
			}
		}
	}
	
	var offers []CardOffer
	
	// Patterns de s√©lecteurs pour le tableau des offres CardMarket (plus exhaustifs)
	tableSelectors := []string{
		"table.table",
		".sellOffersTable", 
		"table[class*='offers']",
		"table[class*='sell']",
		"table[class*='table']",
		".table-striped",
		".table-hover",
		"tbody",
		"table",
		".offers-table",
		"#offers-table",
		".table.table-striped", // CardMarket utilise souvent cette classe
		".table.table-hover",
		"#sellerOffersTable",
		".offers-container table",
		"[data-table='offers']",
	}
	
	// Essayer de trouver le tableau des offres
	for _, tableSelector := range tableSelectors {
		log.Printf("üîç Test s√©lecteur tableau: %s", tableSelector)
		
		// V√©rifier si le tableau existe
		var tableExists bool
		err := chromedp.Run(ctx,
			chromedp.Evaluate(fmt.Sprintf("document.querySelector('%s') !== null", tableSelector), &tableExists),
		)
		
		if err != nil || !tableExists {
			continue
		}
		
		log.Printf("‚úÖ Tableau trouv√© avec: %s", tableSelector)
		
		// Extraire toutes les lignes du tableau
		offersExtracted := a.parseTableRows(ctx, tableSelector, quality, language, edition)
		offers = append(offers, offersExtracted...)
		
		if len(offers) > 0 {
			break
		}
	}
	
	// Si aucune offre trouv√©e avec les tableaux, essayer extraction directe de tous les prix
	if len(offers) == 0 {
		log.Println("üîç Aucun tableau trouv√©, extraction directe des prix...")
		offers = a.extractPricesDirectly(ctx, quality, language, edition)
	}
	
	// Si toujours aucune offre, essayer une approche diff√©rente avec tous les √©l√©ments prix
	if len(offers) == 0 {
		log.Println("üîç Tentative d'extraction universelle de tous les prix visibles...")
		offers = a.extractAllVisiblePrices(ctx, quality, language, edition)
	}
	
	log.Printf("üìä Total offres extraites: %d", len(offers))
	return offers
}

// extractAllVisiblePrices extrait tous les prix visibles de mani√®re plus agressive
func (a *App) extractAllVisiblePrices(ctx context.Context, quality, language string, edition bool) []CardOffer {
	var offers []CardOffer
	
	log.Println("üîç Extraction universelle de tous les prix...")
	
	// Script pour extraire absolument tous les prix visibles
	script := `
		(function() {
			const allPrices = [];
			
			// 1. Chercher dans tous les √©l√©ments visibles
			const walkDOM = function(node) {
				if (node.nodeType === Node.TEXT_NODE) {
					const text = node.textContent || '';
					const priceMatches = text.match(/(\d+[,.]?\d*)\s*‚Ç¨/g);
					if (priceMatches) {
						for (let price of priceMatches) {
							const numPrice = parseFloat(price.replace(',', '.').replace('‚Ç¨', '').trim());
							if (numPrice > 0 && numPrice < 1000) { // Prix raisonnable
								allPrices.push({
									price: price,
									numPrice: numPrice,
									context: text.trim().substring(0, 50),
									element: node.parentElement ? node.parentElement.tagName : 'TEXT'
								});
							}
						}
					}
				} else if (node.nodeType === Node.ELEMENT_NODE) {
					// Ignorer les scripts et styles
					if (node.tagName !== 'SCRIPT' && node.tagName !== 'STYLE') {
						for (let child of node.childNodes) {
							walkDOM(child);
						}
					}
				}
			};
			
			// 2. Chercher aussi dans les attributs et data-*
			const allElements = document.querySelectorAll('*');
			for (let elem of allElements) {
				// V√©rifier les attributs data-price, value, etc.
				const attrs = ['data-price', 'value', 'data-value', 'title', 'alt'];
				for (let attr of attrs) {
					const attrValue = elem.getAttribute(attr);
					if (attrValue) {
						const priceMatches = attrValue.match(/(\d+[,.]?\d*)\s*‚Ç¨/g);
						if (priceMatches) {
							for (let price of priceMatches) {
								const numPrice = parseFloat(price.replace(',', '.').replace('‚Ç¨', '').trim());
								if (numPrice > 0 && numPrice < 1000) {
									allPrices.push({
										price: price,
										numPrice: numPrice,
										context: 'attr:' + attr,
										element: elem.tagName
									});
								}
							}
						}
					}
				}
			}
			
			// Parcourir le DOM
			walkDOM(document.body);
			
			// Supprimer les doublons et trier
			const uniquePrices = [];
			const seenPrices = new Set();
			
			for (let item of allPrices) {
				if (!seenPrices.has(item.numPrice)) {
					seenPrices.add(item.numPrice);
					uniquePrices.push(item);
				}
			}
			
			return uniquePrices.sort((a, b) => a.numPrice - b.numPrice);
		})();
	`
	
	var rawPrices []interface{}
	err := chromedp.Run(ctx,
		chromedp.Evaluate(script, &rawPrices),
	)
	
	if err != nil {
		log.Printf("‚ùå Erreur extraction universelle: %v", err)
		return offers
	}
	
	log.Printf("üîç Prix universels trouv√©s: %d", len(rawPrices))
	
	// Convertir en offres
	for i, rawPrice := range rawPrices {
		if priceMap, ok := rawPrice.(map[string]interface{}); ok {
			if numPrice, ok := priceMap["numPrice"].(float64); ok {
				if priceStr, ok := priceMap["price"].(string); ok {
					// Ne pas assigner automatiquement les crit√®res utilisateur
					// Extraire les vraies informations depuis le contexte de l'offre
					var offerQuality, offerLanguage string
					var offerEdition bool
					
					if context, ok := priceMap["context"].(string); ok {
						offerQuality = extractQualityFromContext(context)
						offerLanguage = extractLanguageFromContext(context) 
						offerEdition = extractEditionFromContext(context)
					}
					
					offer := CardOffer{
						Price:    priceStr,
						PriceNum: numPrice,
						Mint:     offerQuality,
						Language: offerLanguage,
						Edition:  offerEdition,
						Rarity:   "Raret√© universelle",
						SetName:  "Set CardMarket",
					}
					offers = append(offers, offer)
					
					// Log avec contexte pour debugging
					if context, ok := priceMap["context"].(string); ok {
						log.Printf("‚úÖ Prix #%d: %s (contexte: %s)", i+1, offer.Price, context)
					}
					
					// Limiter pour √©viter le spam
					if len(offers) >= 10 {
						break
					}
				}
			}
		}
	}
	
	return offers
}

// extractPricesDirectly extrait directement tous les prix de la page
func (a *App) extractPricesDirectly(ctx context.Context, quality, language string, edition bool) []CardOffer {
	var offers []CardOffer
	
	// Script pour extraire tous les √©l√©ments contenant des prix
	script := `
		(function() {
			const pricesFound = [];
			
			// Priorit√© 1: Chercher dans les lignes de tableaux (plus pr√©cis)
			const tableRows = document.querySelectorAll('tr, .offer-row, [class*="row"]');
			for (let row of tableRows) {
				const text = row.textContent || row.innerText || '';
				const priceMatch = text.match(/(\d+[,.]?\d*)\s*‚Ç¨/g);
				
				if (priceMatch && priceMatch.length > 0) {
					for (let price of priceMatch) {
						const numPrice = parseFloat(price.replace(',', '.').replace('‚Ç¨', ''));
						if (numPrice > 0 && numPrice < 500) {
							pricesFound.push({
								price: price,
								numPrice: numPrice,
								context: text // Contexte complet de la ligne pour extraire crit√®res
							});
						}
					}
				}
			}
			
			// Priorit√© 2: Si pas assez d'offres, chercher dans tous les √©l√©ments
			if (pricesFound.length < 3) {
				const allElements = document.querySelectorAll('*');
				for (let elem of allElements) {
					const text = elem.textContent || elem.innerText || '';
					const priceMatch = text.match(/(\d+[,.]?\d*)\s*‚Ç¨/g);
					
					if (priceMatch && priceMatch.length > 0) {
						for (let price of priceMatch) {
							const numPrice = parseFloat(price.replace(',', '.').replace('‚Ç¨', ''));
							if (numPrice > 0 && numPrice < 500) {
								// Essayer de trouver la ligne parente qui contient plus d'infos
								let contextElem = elem;
								while (contextElem.parentElement && contextElem.parentElement.textContent.length < 200) {
									contextElem = contextElem.parentElement;
								}
								
								pricesFound.push({
									price: price,
									numPrice: numPrice,
									context: contextElem.textContent || text
								});
							}
						}
					}
				}
			}
			
			// Supprimer les doublons et trier par prix
			const uniquePrices = [];
			const seenPrices = new Set();
			
			for (let item of pricesFound) {
				if (!seenPrices.has(item.numPrice)) {
					seenPrices.add(item.numPrice);
					uniquePrices.push(item);
				}
			}
			
			return uniquePrices.sort((a, b) => a.numPrice - b.numPrice).slice(0, 10); // Max 10 offres
		})();
	`
	
	var rawPrices []interface{}
	err := chromedp.Run(ctx,
		chromedp.Evaluate(script, &rawPrices),
	)
	
	if err != nil {
		log.Printf("‚ùå Erreur extraction directe: %v", err)
		return offers
	}
	
	log.Printf("üîç Prix bruts extraits: %d", len(rawPrices))
	
	// Convertir en offres
	for i, rawPrice := range rawPrices {
		if priceMap, ok := rawPrice.(map[string]interface{}); ok {
			if numPrice, ok := priceMap["numPrice"].(float64); ok {
				// Ne pas assigner automatiquement les crit√®res utilisateur
				// Extraire les vraies informations depuis le contexte de l'offre
				var offerQuality, offerLanguage string
				var offerEdition bool
				
				if context, ok := priceMap["context"].(string); ok {
					offerQuality = extractQualityFromContext(context)
					offerLanguage = extractLanguageFromContext(context)
					offerEdition = extractEditionFromContext(context)
				}
				
				offer := CardOffer{
					Price:    fmt.Sprintf("%.2f‚Ç¨", numPrice),
					PriceNum: numPrice,
					Mint:     offerQuality,
					Language: offerLanguage,
					Edition:  offerEdition,
					Rarity:   "Raret√© inconnue",
					SetName:  "Set CardMarket",
				}
				offers = append(offers, offer)
				log.Printf("‚úÖ Prix #%d: %s", i+1, offer.Price)
				
				// Limiter √† quelques offres pour √©viter le spam
				if len(offers) >= 3 {
					break
				}
			}
		}
	}
	
	return offers
}

// parseTableRows parse les lignes du tableau pour extraire les offres
func (a *App) parseTableRows(ctx context.Context, tableSelector, quality, language string, edition bool) []CardOffer {
	var offers []CardOffer
	
	// Script JavaScript simplifi√© pour extraire prix et texte
	script := fmt.Sprintf(`
		(function() {
			const table = document.querySelector('%s');
			if (!table) return [];
			
			const rows = table.querySelectorAll('tr');
			const offers = [];
			
			for (let i = 1; i < rows.length; i++) {
				const row = rows[i];
				const text = row.innerText || row.textContent || '';
				
				// Rechercher les prix dans le texte
				const priceMatch = text.match(/(\d+[,.]?\d*)\s*‚Ç¨/);
				if (priceMatch) {
					offers.push({
						price: priceMatch[0],
						text: text,
						quality: '%s',
						language: '%s',
						edition: %t
					});
				}
			}
			
			return offers;
		})();
	`, tableSelector, quality, language, edition)
	
	var rawOffers []interface{}
	err := chromedp.Run(ctx,
		chromedp.Evaluate(script, &rawOffers),
	)
	
	if err != nil {
		log.Printf("‚ùå Erreur extraction JavaScript: %v", err)
		return offers
	}
	
	log.Printf("üîç Offres brutes extraites: %d", len(rawOffers))
	
	// Convertir les offres
	for _, rawOffer := range rawOffers {
		if offerMap, ok := rawOffer.(map[string]interface{}); ok {
			if priceStr, ok := offerMap["price"].(string); ok {
				priceRegex := regexp.MustCompile(`(\d+[,.]?\d*)\s*‚Ç¨`)
				if matches := priceRegex.FindStringSubmatch(priceStr); len(matches) > 1 {
					priceVal := strings.ReplaceAll(matches[1], ",", ".")
					if price, err := strconv.ParseFloat(priceVal, 64); err == nil {
						// Ne pas assigner automatiquement les crit√®res utilisateur
						// Extraire les vraies informations depuis le contexte de l'offre
						var offerQuality, offerLanguage string
						var offerEdition bool
						
						if text, ok := offerMap["text"].(string); ok {
							offerQuality = extractQualityFromContext(text)
							offerLanguage = extractLanguageFromContext(text)
							offerEdition = extractEditionFromContext(text)
						}
						
						offer := CardOffer{
							Price:    fmt.Sprintf("%.2f‚Ç¨", price),
							PriceNum: price,
							Mint:     offerQuality,
							Language: offerLanguage,
							Edition:  offerEdition,
							Rarity:   "Raret√© CardMarket",
							SetName:  "Set CardMarket",
						}
						offers = append(offers, offer)
						log.Printf("‚úÖ Offre extraite: %s", offer.Price)
					}
				}
			}
		}
	}
	
	return offers
}

// parseHTMLContent extrait les informations de la carte depuis le HTML
func (a *App) parseHTMLContent(htmlContent string, req AddCardRequest) (*ScrapedCardInfo, error) {
	log.Println("üîç Parsing du contenu HTML...")
	
	info := &ScrapedCardInfo{}
	
	// Extraire le nom de la carte
	nameRegex := regexp.MustCompile(`<title>([^<]+)\s*-\s*[^<]*</title>`)
	if matches := nameRegex.FindStringSubmatch(htmlContent); len(matches) > 1 {
		info.Name = strings.TrimSpace(matches[1])
		log.Printf("‚úÖ Nom trouv√©: %s", info.Name)
	}
	
	// Extraire l'extension/set
	setRegex := regexp.MustCompile(`"setName"\s*:\s*"([^"]+)"`)
	if matches := setRegex.FindStringSubmatch(htmlContent); len(matches) > 1 {
		info.Set = matches[1]
		log.Printf("‚úÖ Extension trouv√©e: %s", info.Set)
	}
	
	// Extraire la raret√©
	rarityRegex := regexp.MustCompile(`"rarity"\s*:\s*"([^"]+)"`)
	if matches := rarityRegex.FindStringSubmatch(htmlContent); len(matches) > 1 {
		info.Rarity = matches[1]
		log.Printf("‚úÖ Raret√© trouv√©e: %s", info.Rarity)
	}
	
	// Extraire l'URL de l'image
	imageRegex := regexp.MustCompile(`<img[^>]+src="([^"]*card[^"]*\.jpg[^"]*)"`)
	if matches := imageRegex.FindStringSubmatch(htmlContent); len(matches) > 1 {
		info.ImageURL = matches[1]
		if !strings.HasPrefix(info.ImageURL, "http") {
			info.ImageURL = "https://www.cardmarket.com" + info.ImageURL
		}
		log.Printf("‚úÖ Image trouv√©e: %s", info.ImageURL)
	}
	
	// Rechercher les prix dans le HTML
	// Pattern pour les prix avec qualit√©
	priceRegex := regexp.MustCompile(`class="[^"]*price[^"]*"[^>]*>([0-9,]+\.[0-9]{2})\s*‚Ç¨`)
	priceMatches := priceRegex.FindAllStringSubmatch(htmlContent, -1)
	
	log.Printf("üîç Trouv√© %d prix potentiels", len(priceMatches))
	
	// Comment√© : ne pas prendre automatiquement le premier prix
	// La logique de s√©lection du bon prix selon les crit√®res se fait plus tard
	// if len(priceMatches) > 0 {
	//	 // Prendre le premier prix trouv√© comme prix de base
	//	 priceStr := priceMatches[0][1]
	//	 priceStr = strings.ReplaceAll(priceStr, ",", "")
	//	 if price, err := strconv.ParseFloat(priceStr, 64); err == nil {
	//		 info.Price = fmt.Sprintf("%.2f‚Ç¨", price)
	//		 info.PriceNum = price
	//		 log.Printf("‚úÖ Prix trouv√©: %s", info.Price)
	//	 }
	// }
	
	// Si pas de nom trouv√©, extraire depuis l'URL
	if info.Name == "" {
		urlParts := strings.Split(req.URL, "/")
		if len(urlParts) > 0 {
			lastPart := urlParts[len(urlParts)-1]
			info.Name = strings.ReplaceAll(lastPart, "-", " ")
			log.Printf("‚ö†Ô∏è  Nom extrait de l'URL: %s", info.Name)
		}
	}
	
	// Si pas de prix trouv√©, mettre un prix par d√©faut
	if info.Price == "" {
		info.Price = "0.00‚Ç¨"
		info.PriceNum = 0.0
		log.Println("‚ö†Ô∏è  Aucun prix trouv√©, prix par d√©faut: 0.00‚Ç¨")
	}
	
	return info, nil
}


// testBrowserConnectionSimple teste la connexion avec un contexte isol√©
func (a *App) testBrowserConnectionSimple(opts []chromedp.ExecAllocatorOption, timeout time.Duration) error {
	log.Printf("üîç Test navigateur mode Windows...")
	
	// Cr√©er un contexte de test compl√®tement s√©par√©
	testAllocCtx, testAllocCancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer testAllocCancel()
	
	testCtx, testCancel := chromedp.NewContext(testAllocCtx)
	defer testCancel()
	
	// Test avec timeout court
	timeoutCtx, timeoutCancel := context.WithTimeout(testCtx, 10*time.Second)
	defer timeoutCancel()
	
	// Test minimal : juste cr√©er une page
	err := chromedp.Run(timeoutCtx,
		chromedp.Navigate("about:blank"),
		chromedp.Sleep(1*time.Second),
	)
	
	if err != nil {
		return fmt.Errorf("test rapide √©chou√©: %v", err)
	}
	
	return nil
}

// cleanupWindowsBrowsers ferme les processus de navigateur qui pourraient interf√©rer (Windows uniquement)
func (a *App) cleanupWindowsBrowsers() {
	if runtime.GOOS == "windows" {
		log.Println("üßπ Nettoyage des processus navigateur...")
		// Note: Nous ne tuons pas les processus utilisateur, juste un avertissement
		log.Println("‚ö†Ô∏è  Si Edge est ouvert, veuillez le fermer compl√®tement et relancer l'application")
	}
}

// tryScrapingMode tente le scraping avec des options et timeout sp√©cifiques
func (a *App) tryScrapingMode(url string, req AddCardRequest, opts []chromedp.ExecAllocatorOption, timeout time.Duration) (*ScrapedCardInfo, error) {
	// Nettoyage pr√©ventif sur Windows
	a.cleanupWindowsBrowsers()
	
	// Test de connectivit√© AVANT de cr√©er le contexte principal
	if err := a.testBrowserConnectionSimple(opts, timeout); err != nil {
		return nil, fmt.Errorf("impossible de se connecter au navigateur: %v", err)
	}
	
	allocCtx, allocCancel := chromedp.NewExecAllocator(context.Background(), opts...)
	defer allocCancel()

	// Cr√©er le contexte avec timeout sp√©cifique
	ctx, ctxCancel := chromedp.NewContext(allocCtx, chromedp.WithLogf(log.Printf))
	defer ctxCancel()

	info := &ScrapedCardInfo{}
	var result *CardOffer

	// Mode Windows : tentatives multiples avec d√©lais plus longs
	if runtime.GOOS == "windows" {
		result = a.scrapeWithRetries(req, ctx, url)
		if result == nil {
			return nil, fmt.Errorf("aucune carte correspondant aux crit√®res qualit√©=%s, langue=%s, √©dition=%t apr√®s plusieurs tentatives", req.Quality, req.Language, req.Edition)
		}
	} else {
		// Mode standard pour macOS/Linux
		result = a.launchLoop(req.Quality, req.Language, req.Edition, false, ctx, url)
		if result == nil {
			log.Println("üîÑ Premi√®re tentative √©chou√©e, essai avec chargement suppl√©mentaire...")
			result = a.launchLoop(req.Quality, req.Language, req.Edition, true, ctx, url)
		}
		if result == nil {
			return nil, fmt.Errorf("aucune carte correspondant aux crit√®res qualit√©=%s, langue=%s, √©dition=%t", req.Quality, req.Language, req.Edition)
		}
	}

	// Utiliser le r√©sultat obtenu
	info.Offers = []CardOffer{*result}
	info.Price = result.Price
	info.PriceNum = result.PriceNum

	// Extraire les informations de base (nom, set, raret√©)
	err := chromedp.Run(ctx,
		chromedp.Navigate(url),
		chromedp.WaitVisible("body", chromedp.ByQuery),
		chromedp.Sleep(2*time.Second),
	)
	if err != nil {
		log.Printf("Erreur navigation: %v", err)
	}

	// Extraire le nom
	var name string
	err = chromedp.Run(ctx, chromedp.Text("h1", &name, chromedp.ByQuery))
	if err != nil || name == "" {
		name = "Carte inconnue"
	}
	info.Name = strings.TrimSpace(name)

	// Extraire la raret√© et le set depuis l'info-list-container
	var rarityFromPage, setFromPage string
	err = chromedp.Run(ctx,
		chromedp.Evaluate(`
			(function() {
				var result = {rarity: '', set_name: ''};
				try {
					var infoContainer = document.querySelector('.info-list-container');
					if (infoContainer) {
						// Extraire la raret√© - chercher le SVG avec data-bs-original-title
						var rarityElement = infoContainer.querySelector('svg[data-bs-original-title]');
						result.rarity = rarityElement ? rarityElement.getAttribute('data-bs-original-title') : '';
						
						// Extraire le nom du set - chercher le lien vers l'expansion
						var setElement = infoContainer.querySelector('a[href*="/Expansions/"]');
						result.set_name = setElement ? setElement.textContent.trim() : '';
					}
				} catch(e) {
					console.log('Erreur extraction:', e);
				}
				return result;
			})()
		`, &map[string]interface{}{}),
	)

	// Extraire les valeurs depuis le r√©sultat JavaScript
	if err == nil {
		var pageInfo map[string]interface{}
		err = chromedp.Run(ctx,
			chromedp.Evaluate(`
				(function() {
					var result = {rarity: '', set_name: ''};
					try {
						var infoContainer = document.querySelector('.info-list-container');
						if (infoContainer) {
							var rarityElement = infoContainer.querySelector('svg[data-bs-original-title]');
							result.rarity = rarityElement ? rarityElement.getAttribute('data-bs-original-title') : '';
							
							var setElement = infoContainer.querySelector('a[href*="/Expansions/"]');
							result.set_name = setElement ? setElement.textContent.trim() : '';
						}
					} catch(e) {
						console.log('Erreur extraction:', e);
					}
					return result;
				})()
			`, &pageInfo),
		)

		if err == nil && pageInfo != nil {
			if rarity, ok := pageInfo["rarity"].(string); ok {
				rarityFromPage = strings.TrimSpace(rarity)
			}
			if setName, ok := pageInfo["set_name"].(string); ok {
				setFromPage = strings.TrimSpace(setName)
			}
		}
	}

	log.Printf("Informations extraites de la page: raret√©='%s', set='%s'", rarityFromPage, setFromPage)

	// Utiliser les informations extraites, en priorit√© depuis la page principale
	if setFromPage != "" {
		info.Set = setFromPage
		result.SetName = setFromPage // Mettre √† jour aussi dans result pour les logs
	} else if result.SetName != "" {
		info.Set = result.SetName
	} else {
		info.Set = "Set inconnu"
	}

	if rarityFromPage != "" {
		info.Rarity = rarityFromPage
		result.Rarity = rarityFromPage // Mettre √† jour aussi dans result pour les logs
	} else if result.Rarity != "" {
		info.Rarity = result.Rarity
	} else {
		info.Rarity = "Raret√© inconnue"
	}

	info.Offers = []CardOffer{*result}

	// Utiliser la carte trouv√©e
	info.Price = result.Price
	info.PriceNum = result.PriceNum
	log.Printf("‚úÖ Offre s√©lectionn√©e: %s (mint: %s, langue: %s, edition: %t, rarity: %s, set: %s)",
		result.Price, result.Mint, result.Language, result.Edition, result.Rarity, result.SetName)

	return info, nil
}

func (a *App) extractNumericPrice(priceText string) float64 {
	// Extraire le nombre du texte du prix
	// G√®re les formats: "3,50 ‚Ç¨", "15.000,00‚Ç¨", "1234.56‚Ç¨", etc.

	// Regex pour capturer les nombres avec s√©parateurs de milliers et d√©cimales
	re := regexp.MustCompile(`(\d{1,3}(?:[.,]\d{3})*(?:[.,]\d{1,2})?)`)
	matches := re.FindStringSubmatch(priceText)

	if len(matches) > 1 {
		priceStr := matches[1]

		// D√©terminer le format du prix
		if strings.Contains(priceStr, ".") && strings.Contains(priceStr, ",") {
			// Format europ√©en: 15.000,50 (point = milliers, virgule = d√©cimales)
			// Supprimer les points (milliers) et remplacer virgule par point
			priceStr = strings.ReplaceAll(priceStr, ".", "")
			priceStr = strings.Replace(priceStr, ",", ".", 1)
		} else if strings.Count(priceStr, ".") == 1 {
			// V√©rifier si c'est un s√©parateur de milliers ou de d√©cimales
			parts := strings.Split(priceStr, ".")
			if len(parts) == 2 && len(parts[1]) == 3 && !strings.Contains(priceText, ",") {
				// Probablement un s√©parateur de milliers: 15.000
				priceStr = strings.ReplaceAll(priceStr, ".", "")
			}
			// Sinon c'est probablement des d√©cimales: 15.50
		} else if strings.Contains(priceStr, ",") {
			// Format avec virgule comme s√©parateur d√©cimal: 15,50
			priceStr = strings.Replace(priceStr, ",", ".", 1)
		}

		if price, err := strconv.ParseFloat(priceStr, 64); err == nil {
			log.Printf("Prix extrait: '%s' -> %f", priceText, price)
			return price
		} else {
			log.Printf("Erreur conversion prix: '%s' -> '%s' : %v", priceText, priceStr, err)
		}
	}

	log.Printf("Impossible d'extraire le prix de: '%s'", priceText)
	return 0.0
}

// getPage configure et lance le navigateur Chrome
func (a *App) getPage(moreLoad bool, ctx context.Context, url string) error {
	// Naviguer vers la page
	err := chromedp.Run(ctx,
		chromedp.Navigate(url),
		chromedp.WaitVisible("body", chromedp.ByQuery),
	)
	if err != nil {
		return fmt.Errorf("erreur lors de la navigation: %v", err)
	}

	// Attendre que Cloudflare finisse
	err = chromedp.Run(ctx,
		chromedp.Sleep(3*time.Second),
	)
	if err != nil {
		log.Printf("Erreur lors de l'attente: %v\n", err)
	}

	log.Println("Protection Cloudflare contourn√©e")

	// Fermer la banni√®re de cookies avec timeout
	log.Println("Tentative de fermeture de la banni√®re cookies...")

	// Cr√©er un contexte avec timeout pour √©viter le blocage
	ctxTimeout, cancelTimeout := context.WithTimeout(ctx, 10*time.Second)
	defer cancelTimeout()

	// Essayer plusieurs s√©lecteurs possibles avec timeout
	cookieSelectors := []string{
		"#denyAll",
		"#acceptAll",
		"[data-testid='cookie-banner-deny']",
		"[data-testid='cookie-banner-accept']",
		"button[class*='cookie'][class*='deny']",
		"button[class*='cookie'][class*='decline']",
		"//button[contains(text(), 'Refuser')]",
		"//button[contains(text(), 'Accepter')]",
		"//button[contains(text(), 'Reject')]",
		"//button[contains(text(), 'Accept')]",
	}

	cookieHandled := false
	for _, selector := range cookieSelectors {
		if strings.HasPrefix(selector, "//") {
			// XPath selector
			err = chromedp.Run(ctxTimeout,
				chromedp.Sleep(1*time.Second),
				chromedp.Click(selector, chromedp.BySearch),
			)
		} else {
			// CSS selector
			err = chromedp.Run(ctxTimeout,
				chromedp.Sleep(1*time.Second),
				chromedp.Click(selector, chromedp.ByQuery),
			)
		}

		if err == nil {
			log.Printf("Banni√®re cookies ferm√©e avec le s√©lecteur: %s\n", selector)
			cookieHandled = true
			break
		}
	}

	if !cookieHandled {
		log.Println("Aucune banni√®re cookies trouv√©e ou d√©j√† ferm√©e - continuons...")
		// Attendre un peu au cas o√π il y aurait encore des √©l√©ments qui se chargent
		chromedp.Run(ctx, chromedp.Sleep(2*time.Second))
	}

	if moreLoad {
		log.Println("Tentative de chargement de contenu suppl√©mentaire...")

		// Cr√©er un contexte avec timeout pour le Load More
		ctxLoadMore, cancelLoadMore := context.WithTimeout(ctx, 15*time.Second)
		defer cancelLoadMore()

		// Faire d√©filer vers le bas
		err = chromedp.Run(ctxLoadMore,
			chromedp.Sleep(3*time.Second),
			chromedp.Evaluate("window.scrollTo(0, document.body.scrollHeight);", nil),
			chromedp.Sleep(2*time.Second),
		)
		if err != nil {
			log.Printf("Erreur lors du d√©filement: %v\n", err)
		} else {
			log.Println("D√©filement vers le bas effectu√©")
		}

		// V√©rifier si le bouton Load More existe et est visible
		var buttonExists bool
		err = chromedp.Run(ctxLoadMore,
			chromedp.Evaluate(`
				(function() {
					var btn = document.getElementById('loadMoreButton');
					return btn !== null && btn.offsetParent !== null;
				})()
			`, &buttonExists),
		)

		if err != nil {
			log.Printf("Erreur lors de la v√©rification du bouton Load More: %v\n", err)
		} else if buttonExists {
			log.Println("Bouton Load More d√©tect√©, tentative de clic...")

			// Chercher et cliquer sur le bouton "Load More"
			err = chromedp.Run(ctxLoadMore,
				chromedp.Evaluate("document.getElementById('loadMoreButton').scrollIntoView({behavior: 'smooth', block: 'center'});", nil),
				chromedp.Sleep(2*time.Second),
				chromedp.Evaluate("document.getElementById('loadMoreButton').click();", nil),
				chromedp.Sleep(5*time.Second), // Attendre plus longtemps pour le chargement
			)
			if err != nil {
				log.Printf("Erreur lors du clic sur 'Load More': %v\n", err)
			} else {
				log.Println("Bouton 'Load More' cliqu√© avec succ√®s")
			}
		} else {
			log.Println("Bouton Load More non trouv√© ou pas visible")
		}
	}

	return nil
}

// getInfos extrait les informations des cartes de la page
func (a *App) getInfos(ctx context.Context) ([]CardOffer, error) {
	log.Println("=== D√âBUT GETINFOS ===")

	var res []CardOffer

	// Attendre que la page se charge avec timeout
	log.Println("Attente du chargement complet de la page...")
	ctxTimeout, cancelTimeout := context.WithTimeout(ctx, 20*time.Second)
	defer cancelTimeout()

	err := chromedp.Run(ctxTimeout,
		chromedp.WaitVisible("body", chromedp.ByQuery),
		chromedp.Sleep(5*time.Second),
	)
	if err != nil {
		return nil, fmt.Errorf("erreur lors de l'attente de la page: %v", err)
	}
	log.Println("Page charg√©e")

	// Debug: afficher le titre de la page et l'URL
	var title, currentURL string
	err = chromedp.Run(ctx,
		chromedp.Title(&title),
		chromedp.Location(&currentURL),
	)
	if err == nil {
		log.Printf("Titre de la page: %s\n", title)
		log.Printf("URL actuelle: %s\n", currentURL)
	}

	// Debug: compter les √©l√©ments avec diff√©rents s√©lecteurs
	log.Println("=== DEBUGGING SELECTORS ===")
	possibleSelectors := []string{"article-row", "row", "product-row", "item-row", "offer-row"}

	for _, selector := range possibleSelectors {
		var count int
		err = chromedp.Run(ctx,
			chromedp.Evaluate(fmt.Sprintf("document.getElementsByClassName('%s').length", selector), &count),
		)
		if err == nil {
			log.Printf("Classe '%s': %d √©l√©ments trouv√©s\n", selector, count)
		}
	}

	// Compter le nombre total de divs
	var totalDivs int
	err = chromedp.Run(ctx,
		chromedp.Evaluate("document.getElementsByTagName('div').length", &totalDivs),
	)
	if err == nil {
		log.Printf("Total divs sur la page: %d\n", totalDivs)
	}

	// V√©rifier si on est bien sur la bonne page
	var pageContent string
	err = chromedp.Run(ctx,
		chromedp.Evaluate("document.body.innerText.substring(0, 500)", &pageContent),
	)
	if err == nil {
		log.Printf("D√©but du contenu de la page: %s...\n", strings.ReplaceAll(pageContent, "\n", " "))
	}

	// Obtenir les donn√©es des cartes
	log.Println("Recherche des √©l√©ments article-row...")
	var rowsCount int
	err = chromedp.Run(ctx,
		chromedp.Evaluate("document.getElementsByClassName('article-row').length", &rowsCount),
	)
	if err != nil {
		return nil, fmt.Errorf("erreur lors du comptage des lignes: %v", err)
	}

	log.Printf("Nombre de lignes article-row trouv√©es: %d\n", rowsCount)

	if rowsCount == 0 {
		// Essayer d'autres s√©lecteurs possibles
		alternativeSelectors := []string{
			"tr[data-product]",
			".product-row",
			".item-row",
			"[class*='article']",
			"[class*='product']",
		}

		for _, altSelector := range alternativeSelectors {
			var altCount int
			err = chromedp.Run(ctx,
				chromedp.Evaluate(fmt.Sprintf("document.querySelectorAll('%s').length", altSelector), &altCount),
			)
			if err == nil && altCount > 0 {
				log.Printf("S√©lecteur alternatif '%s': %d √©l√©ments trouv√©s\n", altSelector, altCount)
			}
		}

		return res, nil // Retourner une liste vide plut√¥t qu'une erreur
	}

	// Traiter chaque ligne
	for i := 0; i < rowsCount; i++ {
		log.Printf("Traitement de la carte %d/%d...\n", i+1, rowsCount)

		var cardData map[string]interface{}

		// Extraire les informations de chaque carte via JavaScript
		err = chromedp.Run(ctx,
			chromedp.Evaluate(fmt.Sprintf(`
				(function() {
					var rows = document.getElementsByClassName('article-row');
					var row = rows[%d];
					if (!row) return null;
					
					var result = {};
					
					try {
						// Mint condition
						var mintEl = row.querySelector('.product-attributes .badge');
						result.mint = mintEl ? mintEl.textContent.trim() : '';
						
						// Langue
						var langEl = row.querySelector('.product-attributes .icon');
						result.langue = langEl ? (langEl.getAttribute('data-original-title') || langEl.getAttribute('title') || '') : '';
						
						// Edition
						var editionEl = row.querySelector('.product-attributes .st_SpecialIcon');
						result.edition = editionEl ? true : false;
						
						// Price
						var priceEl = row.querySelector('.price-container');
						result.price = priceEl ? priceEl.textContent.trim() : '';
						
						result.success = true;
					} catch(e) {
						result.error = e.toString();
						result.success = false;
					}			
						
					// Extraire raret√© et set depuis les informations de la carte
					try {
						var infoContainer = document.querySelector('.info-list-container');
						if (infoContainer) {
							// Extraire la raret√© - chercher le SVG avec data-bs-original-title
							var rarityElement = infoContainer.querySelector('svg[data-bs-original-title]');
							result.rarity = rarityElement ? rarityElement.getAttribute('data-bs-original-title') : '';
							
							// Extraire le nom du set - chercher le lien vers l'expansion
							var setElement = infoContainer.querySelector('a[href*="/Expansions/"]');
							result.set_name = setElement ? setElement.textContent.trim() : '';
						}
					} catch(e) {
						result.rarity = '';
						result.set_name = '';
					}

					return result;
				})()
			`, i), &cardData),
		)

		if err != nil {
			log.Printf("Erreur JavaScript lors de l'extraction de la carte %d: %v\n", i+1, err)
			continue
		}

		if cardData == nil {
			log.Printf("Carte %d: donn√©es null\n", i+1)
			continue
		}

		if success, ok := cardData["success"].(bool); !ok || !success {
			if errorMsg, ok := cardData["error"].(string); ok {
				log.Printf("Erreur dans l'extraction de la carte %d: %s\n", i+1, errorMsg)
			}
			continue
		}

		mint := ""
		langue := ""
		price := ""
		rarity := ""
		setName := ""
		edition := false

		if v, ok := cardData["mint"].(string); ok {
			mint = strings.TrimSpace(v)
		}
		if v, ok := cardData["langue"].(string); ok {
			langue = strings.TrimSpace(v)
		}
		if v, ok := cardData["price"].(string); ok {
			price = strings.TrimSpace(v)
		}
		if v, ok := cardData["rarity"].(string); ok {
			rarity = strings.TrimSpace(v)
		}
		if v, ok := cardData["set_name"].(string); ok {
			setName = strings.TrimSpace(v)
		}
		if v, ok := cardData["edition"].(bool); ok {
			edition = v
		}

		cardOffer := CardOffer{
			Mint:     mint,
			Language: langue,
			Edition:  edition,
			Price:    price,
			PriceNum: a.extractNumericPrice(price),
			Rarity:   rarity,
			SetName:  setName,
		}

		log.Printf("Carte %d extraite: mint='%s', langue='%s', edition=%t, price='%s', rarity='%s', set='%s'\n",
			i+1, cardOffer.Mint, cardOffer.Language, cardOffer.Edition, cardOffer.Price, cardOffer.Rarity, cardOffer.SetName)

		res = append(res, cardOffer)
	}

	log.Printf("=== FIN GETINFOS - %d cartes extraites ===\n", len(res))
	return res, nil
}

// findTheCard recherche une carte avec les crit√®res sp√©cifi√©s
func (a *App) findTheCard(donn√©es []CardOffer, quality, langue string, edition bool) *CardOffer {
	log.Printf("Recherche: mint='%s', langue='%s', edition=%t\n", quality, langue, edition)
	log.Printf("Nombre total de cartes √† examiner: %d\n", len(donn√©es))

	for i, row := range donn√©es {
		log.Printf("Carte %d: mint='%s', langue='%s', edition=%t\n",
			i+1, row.Mint, row.Language, row.Edition)

		if row.Mint == quality && row.Language == langue && row.Edition == edition {
			log.Printf("Carte trouv√©e: %+v\n", row)
			return &row
		}
	}

	log.Println("Carte non trouv√©e, nouvelle tentative en cours...")
	return nil
}

// launchLoopPatient lance le processus de scraping avec d√©lais √©tendus pour Windows
func (a *App) launchLoopPatient(quality, langue string, edition, load bool, ctx context.Context, url string) *CardOffer {
	// Mode patient avec d√©lais plus longs
	err := a.getPagePatient(load, ctx, url)
	if err != nil {
		log.Printf("Erreur lors de l'initialisation de la page (mode patient): %v", err)
		return nil
	}

	res, err := a.getInfosPatient(ctx)
	if err != nil {
		log.Printf("Erreur lors de l'extraction des informations (mode patient): %v", err)
		return nil
	}

	card := a.findTheCard(res, quality, langue, edition)
	return card
}

// launchLoop lance le processus de scraping
func (a *App) launchLoop(quality, langue string, edition, load bool, ctx context.Context, url string) *CardOffer {
	err := a.getPage(load, ctx, url)
	if err != nil {
		log.Printf("Erreur lors de l'initialisation de la page: %v", err)
		return nil
	}

	res, err := a.getInfos(ctx)
	if err != nil {
		log.Printf("Erreur lors de l'extraction des informations: %v", err)
		return nil
	}

	card := a.findTheCard(res, quality, langue, edition)
	return card
}

// getPagePatient configure la page avec des d√©lais plus longs pour Windows
func (a *App) getPagePatient(moreLoad bool, ctx context.Context, url string) error {
	log.Println("üêå Mode patient - Navigation avec d√©lais √©tendus...")

	// Cr√©er un nouveau contexte avec timeout tr√®s long pour la navigation
	navCtx, navCancel := context.WithTimeout(context.Background(), 120*time.Second)
	defer navCancel()

	// Navigation plus lente
	err := chromedp.Run(navCtx,
		chromedp.Navigate(url),
		chromedp.WaitVisible("body", chromedp.ByQuery),
		chromedp.Sleep(5*time.Second), // D√©lai plus long
	)
	if err != nil {
		return fmt.Errorf("erreur lors de la navigation (mode patient): %v", err)
	}

	// Attendre encore plus longtemps pour Cloudflare
	log.Println("‚è≥ Attente prolong√©e pour Cloudflare...")
	err = chromedp.Run(ctx, chromedp.Sleep(8*time.Second))
	if err != nil {
		log.Printf("Erreur lors de l'attente prolong√©e: %v\n", err)
	}

	// Fermeture cookies avec timeouts plus longs
	log.Println("üç™ Fermeture cookies (mode patient)...")
	ctxTimeout, cancelTimeout := context.WithTimeout(ctx, 20*time.Second)
	defer cancelTimeout()

	cookieSelectors := []string{
		"#denyAll", "#acceptAll",
		"[data-testid='cookie-banner-deny']",
		"button[class*='cookie'][class*='deny']",
		"//button[contains(text(), 'Refuser')]",
		"//button[contains(text(), 'Accept')]",
	}

	for _, selector := range cookieSelectors {
		err := chromedp.Run(ctxTimeout,
			chromedp.Sleep(2*time.Second), // D√©lai plus long entre chaque tentative
		)
		if err == nil {
			if strings.HasPrefix(selector, "//") {
				err = chromedp.Run(ctxTimeout, chromedp.Click(selector, chromedp.BySearch))
			} else {
				err = chromedp.Run(ctxTimeout, chromedp.Click(selector, chromedp.ByQuery))
			}
			if err == nil {
				log.Printf("‚úÖ Cookies ferm√©s avec: %s\n", selector)
				break
			}
		}
	}

	// Chargement suppl√©mentaire avec d√©lais √©tendus
	if moreLoad {
		log.Println("üìÑ Chargement suppl√©mentaire (mode patient)...")
		ctxLoadMore, cancelLoadMore := context.WithTimeout(ctx, 30*time.Second)
		defer cancelLoadMore()

		err = chromedp.Run(ctxLoadMore,
			chromedp.Sleep(5*time.Second),
			chromedp.Evaluate("window.scrollTo(0, document.body.scrollHeight);", nil),
			chromedp.Sleep(5*time.Second),
		)
		if err != nil {
			log.Printf("Erreur d√©filement patient: %v\n", err)
		}

		// Load More avec d√©lais √©tendus
		var buttonExists bool
		err = chromedp.Run(ctxLoadMore,
			chromedp.Evaluate(`document.getElementById('loadMoreButton') !== null`, &buttonExists),
		)
		if err == nil && buttonExists {
			err = chromedp.Run(ctxLoadMore,
				chromedp.Sleep(3*time.Second),
				chromedp.Evaluate("document.getElementById('loadMoreButton').click();", nil),
				chromedp.Sleep(10*time.Second), // Attente tr√®s longue
			)
			if err == nil {
				log.Println("‚úÖ Load More cliqu√© (mode patient)")
			}
		}
	}

	return nil
}

// getInfosPatient extrait les informations avec des d√©lais √©tendus
func (a *App) getInfosPatient(ctx context.Context) ([]CardOffer, error) {
	log.Println("üîç Extraction patiente des informations...")

	var res []CardOffer

	// Attendre encore plus longtemps
	ctxTimeout, cancelTimeout := context.WithTimeout(ctx, 45*time.Second)
	defer cancelTimeout()

	err := chromedp.Run(ctxTimeout,
		chromedp.WaitVisible("body", chromedp.ByQuery),
		chromedp.Sleep(8*time.Second), // D√©lai tr√®s long
	)
	if err != nil {
		return nil, fmt.Errorf("erreur attente page (mode patient): %v", err)
	}

	// Compter les √©l√©ments avec d√©lai
	log.Println("üî¢ Comptage patient des √©l√©ments...")
	var rowsCount int
	err = chromedp.Run(ctx,
		chromedp.Sleep(3*time.Second),
		chromedp.Evaluate("document.getElementsByClassName('article-row').length", &rowsCount),
	)
	if err != nil {
		return nil, fmt.Errorf("erreur comptage patient: %v", err)
	}

	log.Printf("üìä Mode patient: %d lignes trouv√©es\n", rowsCount)

	if rowsCount == 0 {
		return res, nil
	}

	// Traiter chaque ligne avec d√©lais
	for i := 0; i < rowsCount; i++ {
		log.Printf("üêå Extraction patiente carte %d/%d...\n", i+1, rowsCount)

		// D√©lai entre chaque carte
		time.Sleep(1 * time.Second)

		var cardData map[string]interface{}
		err = chromedp.Run(ctx,
			chromedp.Evaluate(fmt.Sprintf(`
				(function() {
					var rows = document.getElementsByClassName('article-row');
					var row = rows[%d];
					if (!row) return null;
					
					var result = {};
					try {
						var mintEl = row.querySelector('.product-attributes .badge');
						result.mint = mintEl ? mintEl.textContent.trim() : '';
						
						var langEl = row.querySelector('.product-attributes .icon');
						result.langue = langEl ? (langEl.getAttribute('data-original-title') || langEl.getAttribute('title') || '') : '';
						
						var editionEl = row.querySelector('.product-attributes .st_SpecialIcon');
						result.edition = editionEl ? true : false;
						
						var priceEl = row.querySelector('.price-container');
						result.price = priceEl ? priceEl.textContent.trim() : '';
						
						result.success = true;
					} catch(e) {
						result.error = e.toString();
						result.success = false;
					}
					return result;
				})()
			`, i), &cardData),
		)

		if err != nil || cardData == nil {
			continue
		}

		if success, ok := cardData["success"].(bool); !ok || !success {
			continue
		}

		// Extraire les donn√©es comme avant
		mint, _ := cardData["mint"].(string)
		langue, _ := cardData["langue"].(string)
		price, _ := cardData["price"].(string)
		edition, _ := cardData["edition"].(bool)

		cardOffer := CardOffer{
			Mint:     strings.TrimSpace(mint),
			Language: strings.TrimSpace(langue),
			Edition:  edition,
			Price:    strings.TrimSpace(price),
			PriceNum: a.extractNumericPrice(strings.TrimSpace(price)),
		}

		res = append(res, cardOffer)
	}

	log.Printf("‚úÖ Mode patient: %d cartes extraites\n", len(res))
	return res, nil
}

// extractQualityFromContext extrait la qualit√© depuis le contexte HTML
func extractQualityFromContext(context string) string {
	context = strings.ToLower(context)
	
	qualityMap := map[string]string{
		"near mint":     "NM",
		"nm":           "NM",
		"lightly played": "LP", 
		"lp":           "LP",
		"moderately played": "MP",
		"mp":           "MP",
		"heavily played": "HP",
		"hp":           "HP",
		"poor":         "PO",
		"po":           "PO",
		"damaged":      "PO",
	}
	
	for keyword, quality := range qualityMap {
		if strings.Contains(context, keyword) {
			return quality
		}
	}
	
	return "" // Qualit√© inconnue
}

// extractLanguageFromContext extrait la langue depuis le contexte HTML
func extractLanguageFromContext(context string) string {
	context = strings.ToLower(context)
	
	languageMap := map[string]string{
		"fran√ßais":  "Fran√ßais",
		"french":    "Fran√ßais", 
		"english":   "English",
		"anglais":   "English",
		"german":    "Deutsch",
		"allemand":  "Deutsch",
		"deutsch":   "Deutsch",
		"italian":   "Italiano",
		"italien":   "Italiano",
		"italiano":  "Italiano",
		"spanish":   "Espa√±ol",
		"espagnol":  "Espa√±ol",
		"espa√±ol":   "Espa√±ol",
		"japanese":  "Japanese",
		"japonais":  "Japanese",
	}
	
	for keyword, language := range languageMap {
		if strings.Contains(context, keyword) {
			return language
		}
	}
	
	return "" // Langue inconnue
}

// extractEditionFromContext extrait l'information d'√©dition depuis le contexte HTML
func extractEditionFromContext(context string) bool {
	context = strings.ToLower(context)
	
	firstEditionKeywords := []string{
		"1st edition",
		"first edition", 
		"premi√®re √©dition",
		"1ere edition",
		"1√®re √©dition",
		"1st ed",
		"first ed",
	}
	
	for _, keyword := range firstEditionKeywords {
		if strings.Contains(context, keyword) {
			return true
		}
	}
	
	return false // Par d√©faut, pas premi√®re √©dition
}
